{
  "name": "grunt-sloc",
  "description": "SLOC(source line of codes) plugin for Grunt.js",
  "version": "0.4.2",
  "homepage": "https://github.com/rhiokim/grunt-sloc",
  "author": {
    "name": "rhio kim",
    "email": "rhio.kim@gmail.com",
    "url": "http://about.me/rhio"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rhiokim/grunt-sloc.git"
  },
  "bugs": {
    "url": "https://github.com/rhiokim/grunt-sloc/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rhiokim/grunt-sloc/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "grunt-lib-contrib": "~0.4.0",
    "readdir": "~0.0.6",
    "sloc": "~0.0.4"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1",
    "readdir": "0.0.6",
    "grunt-contrib-watch": "~0.4.4"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "sloc"
  ],
  "readme": "# grunt-sloc\n\n> It's SLOC plugin for Grunt.js. based on [sloc](https://npmjs.org/package/sloc)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-sloc --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-sloc');\n```\n\n## The \"sloc\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `sloc` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  sloc: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.reportType\nType: `String`\nDefault value: `stdout`\n\nIt will generate a JSON file SLOC analysis results. The default value is `stdout`.\nIf we do not specify, in the case of the `stdout`, If you are prompted to enter the `json` and output to the CLI on the json file.\n\n#### options.reportPath\nType: `String`\nDefault value: ``\n\nI specify the path where you output the JSON file. Create the root folder if you do not specify if.\n\n#### options.torelant\nType: `Boolean`\nDefault value: `false`\n\nI set a generous analysis. The default is `false`.\nIf `true`, analyze the SLOC on the basis of all the files that you have specified, when any `false`, it is not specified, the analyzes only the extensions that are supported if.\n\n### Usage Examples\n\n#### Basic compression\nThis configuration will count line of the input files using the default options.\n\n```js\ngrunt.initConfig({\n  sloc: {\n    files: {\n      'path/to/target': [ 'lib/onlyMyLib.js', 'app/**.js' ],\n      'path/to/others': [ '*.java', '*.coffee' ],\n    }\n  },\n})\n```\n\n**result**\n\n```\n...\n\nRunning \"sloc\" (sloc) task\n-------------------------------\n        physical lines : 51\n  lines of source code : 29\n         total comment : 6\n            singleline : 6\n             multiline : 0\n                 empty : 16\n\n number of files read  : 12\n   strict(or torelant) mode\n-------------------------------\n\n...\n```\n\n#### Custom Options\n\n<!--\nIn this example, custom options are used to do something else with whatever else. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result in this case would be `Testing: 1 2 3 !!!`\n-->\n\n```js\ngrunt.initConfig({\n  sloc: {\n    options: {\n      reportType: 'json',\n      reportPath: 'path/to/sloc-v<%= pkg.version %>.json',\n    },\n    files: {\n      'path/to/target': [ 'lib/onlyMyLib.js', 'app/**.js' ],\n      'path/to/others': [ '*.java', '*.coffee' ]\n    },\n  },\n})\n```\n\n**exported file example**\n\n```js\n{\n  \"loc\": 72,    //physical lines\n  \"sloc\": 45,   //lines of source code\n  \"cloc\": 10,   //total comment\n  \"scloc\": 10,  //singleline\n  \"mcloc\": 0,   //multiline\n  \"nloc\": 17,   //multiline\n  \"file\": 22    //empty\n}\n```\n\n### Supported Language\n* CoffeeScript\n* C / C++\n* JavaScript\n* Python\n* Java\n* PHP\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n* 2013-07-04   v0.4.0   Support torelant mode.\n* 2013-07-03   v0.3.0   More (strict) exactly analyze\n* 2013-06-30   v0.2.2   Support report to exteranl file\n* 2013-06-30   v0.1.0   First release for Grunt 0.4.1.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-sloc@0.4.2",
  "_shasum": "aa78644238132e73abce5616f788969065e5cde2",
  "_from": "grunt-sloc@~0.4.2",
  "_resolved": "https://registry.npmjs.org/grunt-sloc/-/grunt-sloc-0.4.2.tgz"
}
